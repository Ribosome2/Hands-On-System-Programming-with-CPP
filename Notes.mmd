[Scia Reto](https://sciareto.org) mind map   
> __version__=`1.1`,showJumps=`true`
---

# Root topic

## SystemCall

### 操作系统提供了API开控制系统的资源和行为

### API  底层就是通过调用一种叫system call的<br/>ABI\(application binary interface\)来对系统进行调用

### system call 的剖析

#### x86架构

##### 早期通过interrupt调用

###### 但是interupt很慢

####### 调用的时候要保存cpu状态，做完要恢复状态

##### 现代的x86 CPU 提供了fast system call来<br/>解决inrerrupt慢的问题

###### OS通过提前定义好内存布局，大大降低<br/>了CPU状态保存和恢复的OverHead

### system call is expensive,要尽量少调用

### 不同类型的System Calls

#### Console Input /output

#### Memory Allocation

##### 大多数应用启动的时候就会被分配全局和stack 内存<br/>如果只用到初始被分配这些，就不用向系统要，但是如果用完<br/>堆内存，就要通过system call向系统申请

###### 如果RAM有限，系统就需要把没有在执行的应用的内存拿来用<br/>通过把这些应用切换换到磁盘中去，这种操作就很耗性能

####### 怎么换到磁盘中

###### 所以要避免在时间敏感的代码中使用malloc\(\)或者free\(\)

### SYSRET

### Meltdown and Spectre

#### 利用CPU加载内存和判断权限的间隙

### Meltdown and Spectre

#### 现代复杂系统实现快速SC的方式

#### kernel内存用3：1的内部布局映射到每个应用

##### 其他应用只能看到有授权的核心内存

#### speculative excution

##### 通过CPU猜测执行来提高性能的技术

##### Meltdown 和Specure expooit 就利用了这个特性来绕过内存保护

## fun facts
> leftSide=`true`


### /dev/random 是一个虚拟设备，读取的时候会返回随机数据<br/>可以用来加密或者产生随机数

## 使用C\+\+的好处
> leftSide=`true`


### 类型安全

#### RTTI

##### run\-time type information

##### dynamic\_cast\<\> 可以用来判断是否能转换类型，不触发报错

### 支持Object
> leftSide=`true`


### 模板支持
